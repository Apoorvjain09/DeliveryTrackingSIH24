{
    "sourceFile": "app/live-tracking/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1725610822096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1725611227508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,11 @@\n \n const HeroReact: React.FC = () => {\n     const [startLocation, setStartLocation] = useState<string>(\"\"); // Start Location\n     const [endLocation, setEndLocation] = useState<string>(\"\"); // End Location\n+    const [address, setAddress] = useState<string>(\"\"); // Address input for the POST request\n+    const [nearestLocation, setNearestLocation] = useState<string | null>(null); // Nearest location from API\n+    const [distance, setDistance] = useState<number | null>(null); // Distance from API\n     const [directionsResponse, setDirectionsResponse] = useState<google.maps.DirectionsResult | null>(null);\n     const [errorMessage, setErrorMessage] = useState<string>(\"\");\n \n     const fetchDirections = async () => {\n@@ -50,8 +53,33 @@\n             setErrorMessage(\"An error occurred while fetching directions. Please try again.\");\n         }\n     };\n \n+    const handleAddressSubmit = async () => {\n+        try {\n+            const response = await fetch(\"http://127.0.0.1:8080/process-data/\", {\n+                method: \"POST\",\n+                headers: {\n+                    \"Content-Type\": \"application/json\",\n+                },\n+                body: JSON.stringify({ address }),\n+            });\n+\n+            if (!response.ok) {\n+                throw new Error(\"Failed to send the address.\");\n+            }\n+\n+            const data = await response.json();\n+            console.log(\"Response from server:\", data);\n+            \n+            // Update state with the nearest location and distance from API response\n+            setNearestLocation(data.nearest_location.location);\n+            setDistance(data.nearest_location.distance_km);\n+        } catch (error) {\n+            console.error(\"Error sending address:\", error);\n+        }\n+    };\n+\n     return (\n         <>\n             <Navbar />\n             <div className=\"sm:min-h-[120vh] flex flex-col items-center justify-start px-1 z-10 bg-cover bg-center bg-no-repeat\">\n@@ -69,12 +97,37 @@\n                             {directionsResponse && <DirectionsRenderer directions={directionsResponse} />}\n                         </GoogleMap>\n                     </LoadScript>\n                 </div>\n+\n+                {/* Input for address and submit button */}\n+                <div className=\"mt-8 flex flex-col items-center\">\n+                    <input\n+                        type=\"text\"\n+                        placeholder=\"Enter address\"\n+                        value={address}\n+                        onChange={(e) => setAddress(e.target.value)}\n+                        className=\"p-2 border border-gray-300 rounded mb-4\"\n+                    />\n+                    <button\n+                        onClick={handleAddressSubmit}\n+                        className=\"bg-blue-500 text-white px-4 py-2 rounded\"\n+                    >\n+                        Send Address\n+                    </button>\n+\n+                    {/* Display the nearest location and distance */}\n+                    {nearestLocation && distance !== null && (\n+                        <div className=\"mt-4 p-4 border border-gray-300 rounded\">\n+                            <p>Nearest Location: {nearestLocation}</p>\n+                            <p>Distance: {distance.toFixed(2)} km</p>\n+                        </div>\n+                    )}\n+                </div>\n+\n             </div >\n             <Footer />\n         </>\n     );\n };\n \n export default HeroReact;\n-\n"
                },
                {
                    "date": 1725611257484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,9 @@\n                     </LoadScript>\n                 </div>\n \n                 {/* Input for address and submit button */}\n-                <div className=\"mt-8 flex flex-col items-center\">\n+                <div className=\"mt-8 flex flex-col items-center mt\">\n                     <input\n                         type=\"text\"\n                         placeholder=\"Enter address\"\n                         value={address}\n"
                },
                {
                    "date": 1725611293081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,9 @@\n                     </LoadScript>\n                 </div>\n \n                 {/* Input for address and submit button */}\n-                <div className=\"mt-8 flex flex-col items-center mt-\">\n+                <div className=\"mt-8 flex flex-col items-center mt-2\">\n                     <input\n                         type=\"text\"\n                         placeholder=\"Enter address\"\n                         value={address}\n"
                }
            ],
            "date": 1725610822096,
            "name": "Commit-0",
            "content": "\"use client\";\nimport React, { useState } from \"react\";\nimport Navbar from \"@/components/NavBar\";\nimport Footer from \"@/components/Footer\";\nimport { GoogleMap, DirectionsRenderer, LoadScript } from \"@react-google-maps/api\";\n\nconst containerStyle = {\n    width: \"100%\",\n    height: \"500px\",\n};\n\nconst center = {\n    lat: 20.5937, // Latitude for India\n    lng: 78.9629, // Longitude for India\n};\n\nconst HeroReact: React.FC = () => {\n    const [startLocation, setStartLocation] = useState<string>(\"\"); // Start Location\n    const [endLocation, setEndLocation] = useState<string>(\"\"); // End Location\n    const [directionsResponse, setDirectionsResponse] = useState<google.maps.DirectionsResult | null>(null);\n    const [errorMessage, setErrorMessage] = useState<string>(\"\");\n\n    const fetchDirections = async () => {\n        if (!startLocation || !endLocation) {\n            setErrorMessage(\"Please enter both start and end locations.\");\n            return;\n        }\n\n        const directionsService = new google.maps.DirectionsService();\n\n        try {\n            // Fetch the directions\n            directionsService.route(\n                {\n                    origin: startLocation,\n                    destination: endLocation,\n                    travelMode: google.maps.TravelMode.DRIVING,\n                },\n                (result, status) => {\n                    if (status === google.maps.DirectionsStatus.OK && result) {\n                        setDirectionsResponse(result);\n                        setErrorMessage(\"\"); // Clear any previous errors\n                    } else {\n                        setErrorMessage(\"Unable to find directions. Please try different locations.\");\n                    }\n                }\n            );\n        } catch (error) {\n            console.error(\"Error fetching directions:\", error);\n            setErrorMessage(\"An error occurred while fetching directions. Please try again.\");\n        }\n    };\n\n    return (\n        <>\n            <Navbar />\n            <div className=\"sm:min-h-[120vh] flex flex-col items-center justify-start px-1 z-10 bg-cover bg-center bg-no-repeat\">\n\n                <div className=\"w-full h-96 mt-8\">\n                    <LoadScript\n                        googleMapsApiKey=\"AIzaSyCrCtZQtI7Y-H1wAKWkuxhUg5cIFMr5K04\"\n                        onError={(error) => console.error(\"Google Maps API Error: \", error)}\n                    >\n                        <GoogleMap\n                            mapContainerStyle={containerStyle}\n                            center={center}\n                            zoom={5}\n                        >\n                            {directionsResponse && <DirectionsRenderer directions={directionsResponse} />}\n                        </GoogleMap>\n                    </LoadScript>\n                </div>\n            </div >\n            <Footer />\n        </>\n    );\n};\n\nexport default HeroReact;\n\n"
        }
    ]
}